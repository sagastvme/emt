/*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-4.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./assets/components/BusApp/BusTime.vue?vue&type=style&index=0&id=355826fa&scoped=true&lang=css ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

.parent[data-v-355826fa] {
  display: flex;
  align-items: center;
  justify-content: center;
}
.spinner[data-v-355826fa] {
  border: 2px solid rgba(0, 0, 0, 0.1);
  border-left-color: #3498db;
  border-radius: 50%;
  width: 20px;
  margin-top: 20px;
  height: 20px;
  animation: spin-355826fa 1s linear infinite;

  /* Alternatively, you can set line-height of parent to 20px and text-align to center */
}
@keyframes spin-355826fa {
to {
    transform: rotate(360deg);
}
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwVHdvLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBaVZBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQix1QkFBdUI7QUFFekI7QUFFQTtFQUNFLG9DQUFvQztFQUNwQywwQkFBMEI7RUFDMUIsa0JBQWtCO0VBQ2xCLFdBQVc7RUFDWCxnQkFBZ0I7RUFDaEIsWUFBWTtFQUNaLDJDQUFrQzs7RUFFbEMsc0ZBQXNGO0FBQ3hGO0FBRUE7QUFDRTtJQUNFLHlCQUF5QjtBQUMzQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2NvbXBvbmVudHMvQnVzQXBwL0J1c1RpbWUudnVlIl0sInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cImdyaWQtY29scy0zXCI+XG4gICAgPGgyIGNsYXNzPVwiZmxleCBqdXN0aWZ5LWNlbnRlciBpdGVtcy1jZW50ZXIgbXItMyB0ZXh0LWdyYXktNzAwIGZvbnQtYm9sZCB0ZXh0LTN4bFwiPlxuICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LWNlbnRlciBtbC00IG1yLTJcIj5JbnRyb2R1emNhIGVsIGPDs2RpZ28gZGUgc3UgcGFyYWRhIHBhcmEgY29ub2NlciBlbCB0aWVtcG8gcXVlIGxlIHF1ZWRhIGEgc3UgYXV0b2LDunM8L3NwYW4+XG4gICAgPC9oMj5cblxuICAgIDxmb3JtIGNsYXNzPVwic2VsZWN0LW5vbmUgbWF4LXcteGwgbXgtYXV0byBteS04XCIgQHN1Ym1pdC5wcmV2ZW50PVwic3VibWl0RGF0YVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIFwiPlxuICAgICAgICA8bGFiZWwgZm9yPVwiYnVzXCIgY2xhc3M9XCJ0ZXh0LWdyYXktNzAwIGZvbnQtbWVkaXVtIG1iLTJcIj5Db2RpZ28gZGUgbGEgcGFyYWRhPC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZsZXggIGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBcIj5cbiAgICAgICAgICA8aW5wdXQgaWQ9XCJidXNcIiByZWY9XCJidXNJbnB1dFwiIHYtbW9kZWwubnVtYmVyPVwiYnVzQ29kZVwiIGNsYXNzPVwiIGJvcmRlci0yIGJvcmRlci1ncmF5LTMwMCByb3VuZGVkLW1kIHB4LTMgcHktMiBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXM6Ym9yZGVyLWJsdWUtNTAwIGJveC1ib3JkZXIgXCIgcmVxdWlyZWQgdHlwZT1cIm51bWJlclwiPlxuICAgICAgICAgIDxidXR0b24gdi1pZj1cIiFpc0J1c0NvZGVOZWdhdGl2ZVwiIGNsYXNzPVwiZmxleCBpdGVtcy1jZW50ZXIgcHgtMyBoLWZ1bGwgYmctd2hpdGUgcm91bmRlZC1yLW1kXCI+XG4gICAgICAgICAgICA8c3ZnLXNlYXJjaCB2LWlmPVwiIWxvYWRpbmdcIiBjbGFzcz1cInctNiBoLTYgdGV4dC1ncmF5LTQwMCBtdC0yXCIgLz5cbiAgICAgICAgICA8L2J1dHRvbj5cblxuXG4gICAgICAgIDx0ZWxlcG9ydCB2LWlmPVwiYXNrQ29uZmlybVwiIHRvPVwiYm9keVwiPlxuICAgICAgICAgICAgPGNvbmZpcm0tbWVzc2FnZSA6bWVzc2FnZT1cIidFc3TDoXMgc2VndXJvIGRlIHF1ZSBxdWllcmVzIGJvcnJhciBsYSBwYXJhZGEgJyArdGhpcy5idXNDb2RlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsb3NlLWVycm9yPVwidGhpcy5hc2tDb25maXJtPWZhbHNlXCIgdi1pZj1cInRoaXMuYXNrQ29uZmlybVwiPlxuICAgICAgICAgICAgICA8YnV0dG9uIEBjbGljaz1cInJlbW92ZUZhdm91cml0ZVwiIGNsYXNzPVwiYmctcmVkLTUwMCB0ZXh0LXdoaXRlIHB4LTMgcHktMiByb3VuZGVkLW1kIGhvdmVyOmJnLXJlZC02MDAgdHJhbnNpdGlvbi1jb2xvcnMgZHVyYXRpb24tMjAwXCI+U0k8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cIm1sLTQgYmctZ3JheS0yMDAgdGV4dC1ncmF5LTcwMCBweC0zIHB5LTIgcm91bmRlZC1tZCBob3ZlcjpiZy1ncmF5LTMwMCB0cmFuc2l0aW9uLWNvbG9ycyBkdXJhdGlvbi0yMDBcIiBAY2xpY2s9XCJ0aGlzLmFza0NvbmZpcm09ZmFsc2VcIj5OTzwvYnV0dG9uPlxuICAgICAgICAgICAgPC9jb25maXJtLW1lc3NhZ2U+XG4gICAgICAgICAgICA8ZXJyb3ItbWVzc2FnZSB2LWVsc2Ugdi1pZj1cInNob3dFcnJvck1lc3NhZ2VcIiBtZXNzYWdlPVwiRWwgbnVtZXJvIGRlYmUgc2VyIG1heW9yIHF1ZSAxXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbG9zZS1lcnJvcj1cInNob3dFcnJvck1lc3NhZ2U9ZmFsc2VcIiBjbGFzcz1cImFic29sdXRlIHRvcC1mdWxsIGxlZnQtMCB3LWZ1bGwgLW10LTIgcHgtMyBweS0yIGJnLXJlZC0xMDAgYm9yZGVyIGJvcmRlci1yZWQtNTAwIHJvdW5kZWQtbWQgdGV4dC1yZWQtNTAwIHRleHQtc21cIiAvPlxuICAgICAgICAgIDwvdGVsZXBvcnQ+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwicGFyZW50IG10LTRcIj5cbiAgICAgICAgICA8ZGl2IHYtaWY9XCJsb2FkaW5nXCI+XG4gICAgICAgICAgICA8c3ZnIGNsYXNzPVwiYW5pbWF0ZS1zcGluIC1tbC0xIG1yLTMgaC01IHctNSB0ZXh0LXdoaXRlXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGZpbGw9XCJub25lXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPlxuICAgICAgICAgICAgICA8Y2lyY2xlIGNsYXNzPVwib3BhY2l0eS03NVwiIGN4PVwiMTJcIiBjeT1cIjEyXCIgcj1cIjEwXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiNFwiPjwvY2lyY2xlPlxuICAgICAgICAgICAgICA8cGF0aCBjbGFzcz1cIm9wYWNpdHktMjVcIiBmaWxsPVwiYmxhY2tcIiBkPVwiTTQgMTJhOCA4IDAgMDE4LThWMEM1LjM3MyAwIDAgNS4zNzMgMCAxMmg0elwiPjwvcGF0aD5cbiAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgPC9kaXY+XG4gICAgPC9mb3JtPlxuXG4gICAgPGRpdiB2LWlmPVwiZGF0YVJlY292ZXJlZCAmJiAhc3RvcERvZXNudEV4aXN0XCIgPlxuICAgICAgPGRpdiBjbGFzcz1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIFwiPlxuICAgICAgICA8YnV0dG9uIEBjbGljaz1cInNob3dTdG9wRGV0YWlsc1wiIGNsYXNzPVwiYmctZ3JheS0yMDAgaG92ZXI6YmctZ3JheS0zMDAgcm91bmRlZC1tZCBweC0zIHB5LTIgZmxleFwiPlxuICAgICAgICAgIDxoMiBjbGFzcz1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHRleHQtY2VudGVyXCI+XG4gICAgICAgICAgICA8c3BhbiA+SW5mb3JtYWNpw7NuIGRlIGxhIHBhcmFkYTwvc3Bhbj5cbiAgICAgICAgICAgIDxzdmctZXllLWNsb3NlZCB2LWlmPVwic2hvd1N0b3BEZXRhaWxzVmFyaWFibGVcIiBjbGFzcz1cInctNiBoLTZcIiAvPlxuICAgICAgICAgICAgPHN2Zy1leWUtb3BlbmVkIHYtZWxzZSBjbGFzcz1cInctNiBoLTZcIiAvPlxuICAgICAgICAgIDwvaDI+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG5cblxuICAgICAgPGRpdiB2LWlmPVwic2hvd1N0b3BEZXRhaWxzVmFyaWFibGUgXCIgaWQ9XCJidXNTdG9wSW5mb1wiIGNsYXNzPVwibXQtNFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibWF4LXctN3hsIG14LWF1dG8gcHktNiBweC02IGxnOnB4LThcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwib3ZlcmZsb3cteC1hdXRvXCI+XG4gICAgICAgICAgICA8dGFibGUgY2xhc3M9XCJ0YWJsZS1hdXRvIGJvcmRlci1jb2xsYXBzZSB3LWZ1bGxcIj5cbiAgICAgICAgICAgICAgPHRoZWFkPlxuICAgICAgICAgICAgICA8dHIgY2xhc3M9XCJiZy1bIzg3ZjZmZl0gdGV4dC1bIzYxNjE2M10gdXBwZXJjYXNlIHRleHQtc20gZm9udC1zZW1pYm9sZFwiPlxuICAgICAgICAgICAgICA8dGggY2xhc3M9XCJweC0zIHB5LTIgXCI+Tm9tYnJlIGRlIGxhIHBhcmFkYTwvdGg+XG4gICAgICAgICAgICAgICAgPHRoIGNsYXNzPVwicHgtMyBweS0yIFwiPkRpcmVjY2lvbiBkZSBsYSBwYXJhZGE8L3RoPlxuICAgICAgICAgICAgICAgIDx0aCBjbGFzcz1cInB4LTMgcHktMiBcIj5Db2RpZ28gZGUgbGEgcGFyYWRhPC90aD5cbiAgICAgICAgICAgICAgICA8dGggY2xhc3M9XCJweC0zIHB5LTIgXCI+TnVtZXJvIGRlIGxpbmVhczwvdGg+XG4gICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgIDwvdGhlYWQ+XG4gICAgICAgICAgICAgIDx0Ym9keSBjbGFzcz1cInRleHQtWyM2MTYxNjNdIHRleHQtc20gZm9udC1saWdodFwiPlxuICAgICAgICAgICAgICA8dHIgIGNsYXNzPVwiYm9yZGVyLWIgYm9yZGVyLWdyYXktMjAwIGhvdmVyOmJnLWdyYXktMTAwXCI+XG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwiYm9yZGVyIHB4LTMgcHktMiB0ZXh0LWNlbnRlclwiPnt7IHRoaXMuYnVzU3RvcEluZm8uc3RvcHNbMF0ubmFtZSB9fTwvdGQ+XG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwiYm9yZGVyIHB4LTMgcHktMiB0ZXh0LWNlbnRlclwiPnt7IHRoaXMuYnVzU3RvcEluZm8uc3RvcHNbMF0ucG9zdGFsQWRkcmVzcyB9fTwvdGQ+XG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwiYm9yZGVyIHB4LTMgcHktMiB0ZXh0LWNlbnRlclwiPnt7IHRoaXMuYnVzU3RvcEluZm8uc3RvcHNbMF0uc3RvcCB9fTwvdGQ+XG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwiYm9yZGVyIHB4LTMgcHktMiB0ZXh0LWNlbnRlclwiPnt7IHRoaXMuYnVzU3RvcEluZm8uc3RvcHNbMF0uZGF0YUxpbmUubGVuZ3RoIH19PC90ZD5cbiAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgICAgIDwvdGFibGU+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG5cbiAgICAgIDxkaXYgY2xhc3M9XCJtYXgtdy03eGwgbXgtYXV0byBweS02ICBsZzpweC04IFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJvdmVyZmxvdy14LWF1dG9cIj5cbiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz1cInctZnVsbCBib3JkZXItY29sbGFwc2UgdGFibGUtYXV0b1wiPlxuICAgICAgICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgICAgIDx0ciBjbGFzcz1cImJnLVsjZGFmNWZmXSB0ZXh0LVsjNjE2MTYzXSB1cHBlcmNhc2UgdGV4dC1zbSBmb250LXNlbWlib2xkXCI+XG5cbiAgICAgICAgICAgICAgPHRoIGNsYXNzPVwicHgtMyBweS0yIHRleHQtY2VudGVyXCI+TGluZWFzPC90aD5cbiAgICAgICAgICAgICAgICA8dGggY2xhc3M9XCJweC0zIHB5LTIgdGV4dC1jZW50ZXJcIj5EaXJlY2Npb248L3RoPlxuICAgICAgICAgICAgICAgIDx0aCBjbGFzcz1cInB4LTMgcHktMiB0ZXh0LWNlbnRlclwiPlRpZW1wbyBtZWRpbyBkZSBsbGVnYWRhPC90aD5cbiAgICAgICAgICAgICAgICA8dGggY2xhc3M9XCJweC0zIHB5LTIgdGV4dC1jZW50ZXJcIj5Ib3JhIGRlIGluaWNpbzwvdGg+XG4gICAgICAgICAgICAgICAgPHRoIGNsYXNzPVwicHgtMyBweS0yIHRleHQtY2VudGVyXCI+SG9yYSBkZSBmaW5hbGl6YWNpb248L3RoPlxuICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICA8L3RoZWFkPlxuICAgICAgICAgICAgICA8dGJvZHkgY2xhc3M9XCJ0ZXh0LVsjNjE2MTYzXSB0ZXh0LXNtIGZvbnQtbGlnaHRcIj5cbiAgICAgICAgICAgICAgPHRyIHYtZm9yPVwic3RvcCBpbiB0aGlzLmJ1c1N0b3BJbmZvLnN0b3BzWzBdLmRhdGFMaW5lXCIgOmtleT1cInN0b3BcIlxuICAgICAgICAgICAgICAgICAgY2xhc3M9XCJib3JkZXItYiBib3JkZXItZ3JheS0yMDAgaG92ZXI6YmctZ3JheS0xMDBcIj5cbiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCIgcHgtMyBweS0yXCI+e3sgc3RvcC5sYWJlbCB9fTwvdGQ+XG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwiIHB4LTMgcHktMlwiPnt7IHN0b3AuZGlyZWN0aW9uID09PSAnQScgPyBzdG9wLmhlYWRlckEgOiBzdG9wLmhlYWRlckIgfX08L3RkPlxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cIiBweC0zIHB5LTJcIj57eyAocGFyc2VJbnQoc3RvcC5tYXhGcmVxKSArIHBhcnNlSW50KHN0b3AubWluRnJlcSkpIC8gMiB9fTwvdGQ+XG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwiIHB4LTMgcHktMlwiPnt7IHN0b3Auc3RhcnRUaW1lIH19PC90ZD5cbiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCIgcHgtMyBweS0yXCI+e3sgc3RvcC5zdG9wVGltZSB9fTwvdGQ+XG4gICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgICAgICA8L3RhYmxlPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cInAtNVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleCBqdXN0aWZ5LWNlbnRlciBpdGVtcy1jZW50ZXJcIj5cbiAgICAgICAgPGgyIGNsYXNzPVwidGV4dC0yeGwgZm9udC1ib2xkIG1iLTNcIj5CdXNlcyBlbiBjYW1pbm88L2gyPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiB2LWlmPVwibG9nZ2VkSW5cIj5cbiAgICAgICAgICA8ZGl2IHYtaWY9XCJ3YW50c1RvQWRkXCI+XG4gICAgICAgICAgICA8Zm9ybSBAc3VibWl0LnByZXZlbnQ9XCJhZGRGYXZvdXJpdGVcIiBjbGFzcz1cImZsZXggaXRlbXMtY2VudGVyIG1iLTI1XCI+XG4gICAgICAgICAgICAgIDxpbnB1dCByZXF1aXJlZCB0eXBlPVwidGV4dFwiIHJlZj1cImN1c3RvbU5hbWVcIiBwbGFjZWhvbGRlcj1cIk5vbWJyZSBwZXJzb25hbGl6YWRvXCIgY2xhc3M9XCJ3LWZ1bGwgYm9yZGVyLTIgYm9yZGVyLWdyYXktMzAwIHJvdW5kZWQtbWQgcHgtMyBweS0yIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpib3JkZXItYmx1ZS01MDAgYm94LWJvcmRlciBteC01XCI+XG4gICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwiYmctYmx1ZS01MDAgaG92ZXI6YmctYmx1ZS03MDAgdGV4dC13aGl0ZSBmb250LWJvbGQgcHktMiBweC0zIHJvdW5kZWQgbWwtM1wiPkFuYWRpciBhIGZhdm9yaXRvczwvYnV0dG9uPlxuICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPGRpdiB2LWlmPVwiIXdhbnRzVG9BZGRcIiBjbGFzcz1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIG1iLTVcIj5cbiAgICAgICAgICAgIDxzdmctc3Rhci1lbXB0eSB2LWlmPVwiIWlzRmF2b3VyaXRlXCIgQGNsaWNrPVwidGhpcy53YW50c1RvQWRkPXRydWVcIiBjbGFzcz1cInctNiBoLTYgY3Vyc29yLXBvaW50ZXJcIiAvPlxuICAgICAgICAgICAgPHN2Zy1zdGFyLWZ1bGwgdi1lbHNlIEBjbGljaz1cInRoaXMuYXNrQ29uZmlybT10cnVlXCIgY2xhc3M9XCJ3LTYgaC02IGN1cnNvci1wb2ludGVyXCIgLz5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWwtMlwiPnt7IGlzRmF2b3VyaXRlID8gJ1BhcmFkYSBhZ3JlZ2FkYSBhIGZhdm9yaXRvcycgOiAnQWdyZWdhciBhIGZhdm9yaXRvcycgfX08L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleCBqdXN0aWZ5LWNlbnRlciBpdGVtcy1jZW50ZXIgbXQtNSBcIj5cbiAgICAgICAgICA8dWwgY2xhc3M9XCJibG9jayBpbmxpbmUtYmxvY2sgbGc6dGFibGVcIj5cbiAgICAgICAgICAgIDxsaSB2LWZvcj1cImJ1c2VzIGluIGRhdGFBcnJheVsnQXJyaXZlJ11cIiA6a2V5PVwiYnVzZXNcIiBjbGFzcz1cInRleHQtM3hsIG1iLTMgZmxleCBpdGVtcy1jZW50ZXIgbGc6dGFibGUtY2VsbCBsZzpteC02IGxnOm15LTJcIj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCIgcm91bmRlZC1mdWxsIHB5LTEgcHgtMyBtci01IHRleHQtM3hsICBtZDpiZy1yZWQtNTAwXCI+e3sgYnVzZXMubGluZSB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8ZGl2Pnt7IGJ1c2VzLmRlc3RpbmF0aW9uIH19PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1yLTVcIj5UaWVtcG8gZXN0aW1hZG86IHt7IGRpc3BsYXlBcnJpdmluZ1RpbWUoYnVzZXMuZXN0aW1hdGVBcnJpdmUpIH19PC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICA8L3VsPlxuICAgICAgICA8L2Rpdj5cblxuXG5cblxuXG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiB2LWlmPVwic3RvcERvZXNudEV4aXN0XCIgY2xhc3M9XCJmbGV4IGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlclwiPlxuICAgICAgICA8aDMgY2xhc3M9XCJ0ZXh0LWxnIGZvbnQtYm9sZFwiPkxhIHBhcmFkYSBxdWUgaGEgaW50cm9kdWNpZG8gbm8gZXhpc3RlPC9oMz5cbiAgICAgIDwvZGl2PlxuXG4gICAgPC9kaXY+XG5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IFN2Z1NlYXJjaCBmcm9tIFwiLi4vU3ZnSWNvbnMvU3ZnU2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCBTdmdFeWVPcGVuZWQgZnJvbSBcIi4uL1N2Z0ljb25zL1N2Z0V5ZU9wZW5lZC52dWVcIjtcbmltcG9ydCBTdmdFeWVDbG9zZWQgZnJvbSBcIi4uL1N2Z0ljb25zL1N2Z0V5ZUNsb3NlZC52dWVcIjtcbmltcG9ydCBFcnJvck1lc3NhZ2UgZnJvbSBcIi4uL01lc3NhZ2VzL0Vycm9yTWVzc2FnZS52dWVcIjtcbmltcG9ydCBTdmdTdGFyIGZyb20gXCIuLi9TdmdJY29ucy9TdmdTdGFyRW1wdHkudnVlXCI7XG5pbXBvcnQgU3ZnU3RhckVtcHR5IGZyb20gXCIuLi9TdmdJY29ucy9TdmdTdGFyRW1wdHkudnVlXCI7XG5pbXBvcnQgU3ZnU3RhckZ1bGwgZnJvbSBcIi4uL1N2Z0ljb25zL1N2Z1N0YXJGdWxsLnZ1ZVwiO1xuaW1wb3J0IENvbmZpcm1NZXNzYWdlIGZyb20gXCIuLi9NZXNzYWdlcy9Db25maXJtTWVzc2FnZS52dWVcIjtcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJ1c0NvZGU6IG51bGwsXG4gICAgICBjbGllbnRJZDogJzg4YzAxNWY4LTg0NzktNGM0My04NjQ0LWQwNDViYjIyODBhNycsXG4gICAgICBwYXNzS2V5OiAnRTAwNjcxRkNEQTMwQ0YwNjdGMUVBNzg1NENBRjM0MzI3MTk3NTQ0NDJFN0ZCRkNGQThDMjM1RjQ2QUZCNEVENDJBMENDNzVEQkJBMUQwQzJBQTgyNEJDMkZGMTZBQURFODcwQTFCNEQyNDU4MDgyMTI3QUQ1MEVCQUE4MDhEQ0QnLFxuICAgICAgYWNjZXNzVG9rZW46IG51bGwsXG4gICAgICBkYXRhUmVjb3ZlcmVkOiBmYWxzZSxcbiAgICAgIGRhdGFBcnJheTogbnVsbCxcbiAgICAgIGJ1c1N0b3BJbmZvOiBudWxsLFxuICAgICAgc2hvd1N0b3BEZXRhaWxzVmFyaWFibGU6IGZhbHNlLFxuICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICBzaG93RXJyb3JNZXNzYWdlOiBmYWxzZSxcbiAgICAgIHN0b3BEb2VzbnRFeGlzdDogZmFsc2UsXG4gICAgICBpc0Zhdm91cml0ZTogbnVsbCxcbiAgICAgIGxvZ2dlZEluOm51bGwsXG4gICAgICB3YW50c1RvQWRkOmZhbHNlLFxuICAgICAgYXNrQ29uZmlybTpmYWxzZVxuXG4gICAgfVxuICB9LFxuICBjb21wdXRlZDoge1xuICAgIGlzQnVzQ29kZU5lZ2F0aXZlKCkge1xuICAgICAgaWYgKHRoaXMuYnVzQ29kZSA8IDApIHtcbiAgICAgICAgdGhpcy5idXNDb2RlID0gbnVsbDtcbiAgICAgICAgdGhpcy5zaG93RXJyb3JNZXNzYWdlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy4kcmVmcy5idXNJbnB1dC5ibHVyKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuXG4gICAgYXN5bmMgbG9naW4oKSB7XG4gICAgICB0aGlzLnN0b3BEb2VzbnRFeGlzdCA9IGZhbHNlXG4gICAgICB0aGlzLmRhdGFSZWNvdmVyZWQgPSBmYWxzZVxuICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZVxuICAgICAgY29uc3QgdXJsID0gJ2h0dHBzOi8vb3BlbmFwaS5lbXRtYWRyaWQuZXMvdjEvbW9iaWxpdHlsYWJzL3VzZXIvbG9naW4vJztcbiAgICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICdYLUNsaWVudElkJzogdGhpcy5jbGllbnRJZCxcbiAgICAgICAgJ3Bhc3NLZXknOiB0aGlzLnBhc3NLZXksXG4gICAgICB9O1xuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCh1cmwsIHtoZWFkZXJzOiBoZWFkZXJzfSk7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlWydkYXRhJ11bJ2RhdGEnXVswXVsnYWNjZXNzVG9rZW4nXSlcbiAgICAgICAgdGhpcy5hY2Nlc3NUb2tlbiA9IHJlc3BvbnNlWydkYXRhJ11bJ2RhdGEnXVswXVsnYWNjZXNzVG9rZW4nXTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgLy8gaGFuZGxlIHRoZSByZXNwb25zZSBkYXRhIGhlcmVcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIGhhbmRsZSBhbnkgZXJyb3JzIGhlcmVcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIGdldEJ1c2VzQXJyaXZhbCgpIHtcbiAgICAgIGlmICh0aGlzLmJ1c0NvZGUgPT0gMCkge1xuICAgICAgICB0aGlzLmJ1c0NvZGUgPSAxXG4gICAgICB9XG4gICAgICBjb25zdCBzdG9wSWQgPSB0aGlzLmJ1c0NvZGU7XG5cbiAgICAgIGNvbnN0IGxpbmVBcnJpdmUgPSAnJztcbiAgICAgIGNvbnN0IHVybCA9IGBodHRwczovL29wZW5hcGkuZW10bWFkcmlkLmVzL3YyL3RyYW5zcG9ydC9idXNlbXRtYWQvc3RvcHMvJHtzdG9wSWR9L2Fycml2ZXMvJHtsaW5lQXJyaXZlfWA7XG4gICAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAnYWNjZXNzVG9rZW4nOiB0aGlzLmFjY2Vzc1Rva2VuLFxuICAgICAgfTtcbiAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgIFwiY3VsdHVyZUluZm9cIjogXCJFU1wiLFxuICAgICAgICBcIlRleHRfU3RvcFJlcXVpcmVkX1lOXCI6IFwiWVwiLFxuICAgICAgICBcIlRleHRfRXN0aW1hdGlvbnNSZXF1aXJlZF9ZTlwiOiBcIllcIixcbiAgICAgICAgXCJUZXh0X0luY2lkZW5jZXNSZXF1aXJlZF9ZTlwiOiBcIk5cIixcbiAgICAgICAgXCJEYXRlVGltZV9SZWZlcmVuY2VkX0luY2lkZW5jaWVzX1lZWVlNTUREXCI6IFwiXCIsXG4gICAgICB9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wb3N0KHVybCwgYm9keSwge2hlYWRlcnM6IGhlYWRlcnN9KTtcbiAgICAgICAgdGhpcy5kYXRhQXJyYXkgPSByZXNwb25zZVsnZGF0YSddWydkYXRhJ11bMF1cblxuXG4gICAgICAgIGlmICh0aGlzLmRhdGFBcnJheS5TdG9wSW5mby5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc3Qgc3RvcEluZm8gPSBhd2FpdCBheGlvcy5nZXQoYGh0dHBzOi8vb3BlbmFwaS5lbXRtYWRyaWQuZXMvdjEvdHJhbnNwb3J0L2J1c2VtdG1hZC9zdG9wcy8ke3N0b3BJZH0vZGV0YWlsL2AsIHtoZWFkZXJzOiBoZWFkZXJzfSk7XG4gICAgICAgICAgdGhpcy5idXNTdG9wSW5mbyA9IHN0b3BJbmZvLmRhdGEuZGF0YVswXVxuICAgICAgICAgIGNvbnNvbGUubG9nKHN0b3BJbmZvLmRhdGEuZGF0YVswXSlcbiAgICAgICAgICBjb25zb2xlLmxvZyhzdG9wSW5mby5kYXRhLmRhdGFbMF0uc3RvcHMubGVuZ3RoKVxuXG4gICAgICAgICAgdGhpcy5zdG9wRG9lc250RXhpc3QgPSBmYWxzZVxuICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlXG4gICAgICAgICAgdGhpcy5kYXRhUmVjb3ZlcmVkID0gdHJ1ZVxuICAgICAgICAgIHRoaXMuc3RvcERvZXNudEV4aXN0ID0gZmFsc2VcbiAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZVxuICAgICAgICAgIHRoaXMuZGF0YVJlY292ZXJlZCA9IHRydWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnN0b3BEb2VzbnRFeGlzdCA9IHRydWVcbiAgICAgICAgICB0aGlzLmJ1c0NvZGUgPSBudWxsXG4gICAgICAgICAgdGhpcy4kcmVmcy5idXNJbnB1dC5mb2N1cygpXG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmRhdGFBcnJheSlcblxuICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZVsnZGF0YSddWydkYXRhJ11bMF0pXG4gICAgICAgIC8vIGhhbmRsZSB0aGUgcmVzcG9uc2UgZGF0YSBoZXJlXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBoYW5kbGUgYW55IGVycm9ycyBoZXJlXG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyBzdWJtaXREYXRhKCkge1xuICAgICAgaWYgKGF3YWl0IHRoaXMubG9naW4oKSkge1xuICAgICAgICBhd2FpdCB0aGlzLmdldEJ1c2VzQXJyaXZhbCgpO1xuICAgICAgICBhd2FpdCB0aGlzLmNoZWNrSXNGYXZvdXJpdGUoKTtcbiAgICAgICAgYXdhaXQgYXhpb3MucG9zdCgnL2FkZE9uZUdsb2JhbFZpc2l0Jywge1xuICAgICAgICAgICdidXNDb2RlJzogdGhpcy5idXNDb2RlXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyBjaGVja0lzRmF2b3VyaXRlKCkge1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnBvc3QoJy9jaGVja0Zhdm91cml0ZScsIHtcbiAgICAgICAgJ2J1c0NvZGUnOiB0aGlzLmJ1c0NvZGVcbiAgICAgIH0pXG4gICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSlcbiAgICAgIGlmKHJlc3BvbnNlLmRhdGEuaXNGYXZvdXJpdGU9PSdub3RMb2dnZWRJbicpe1xuICAgICAgICB0aGlzLmxvZ2dlZEluPWZhbHNlXG4gICAgICB9ZWxzZXtcbiAgICAgICAgdGhpcy5sb2dnZWRJbj10cnVlXG4gICAgICAgIHRoaXMuaXNGYXZvdXJpdGUgPSByZXNwb25zZS5kYXRhLmlzRmF2b3VyaXRlXG4gICAgICAgIGlmKHRoaXMuaXNGYXZvdXJpdGUpe1xuICAgICAgICAgIGF3YWl0IGF4aW9zLnBvc3QoJy9hZGRPbmVWaXNpdCcsIHtcbiAgICAgICAgICAgICdidXNDb2RlJzogdGhpcy5idXNDb2RlXG4gICAgICAgICAgfSlcblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICB9LFxuICAgIHNob3dTdG9wRGV0YWlscygpIHtcbiAgICAgIHRoaXMuc2hvd1N0b3BEZXRhaWxzVmFyaWFibGUgPSAhdGhpcy5zaG93U3RvcERldGFpbHNWYXJpYWJsZVxuICAgIH0sXG4gICAgZGlzcGxheUFycml2aW5nVGltZSh0aW1lKSB7XG4gICAgICBjb25zdCB0cmFuc2xhdGVkVGltZSA9IE1hdGgucm91bmQodGltZSAvIDYwKTtcbiAgICAgIGlmICh0cmFuc2xhdGVkVGltZSA8IDEpIHtcbiAgICAgICAgcmV0dXJuICdMbGVnYW5kbyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJhbnNsYXRlZFRpbWUgKyAnIG1pbnV0b3MnO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgYWRkRmF2b3VyaXRlKCkge1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnBvc3QoJy9zYXZlRmF2b3VyaXRlJywge1xuICAgICAgICAnYnVzQ29kZSc6IHRoaXMuYnVzQ29kZSxcbiAgICAgICAgJ3N0b3BOYW1lJzp0aGlzLmJ1c1N0b3BJbmZvLnN0b3BzWzBdLm5hbWUsXG4gICAgICAgICdidXNlcyc6dGhpcy5idXNTdG9wSW5mby5zdG9wc1swXS5kYXRhTGluZSxcbiAgICAgICAgJ2N1c3RvbU5hbWUnOnRoaXMuJHJlZnMuY3VzdG9tTmFtZS52YWx1ZVxuICAgICAgfSlcbiAgICAgIHRoaXMud2FudHNUb0FkZD1mYWxzZVxuICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpXG4gICAgICB0aGlzLmlzRmF2b3VyaXRlID0gdHJ1ZVxuXG4gICAgICBjb25zb2xlLmxvZyh0aGlzLndhbnRzVG9BZGQpXG4gICAgfSxcbiAgIGFzeW5jIHJlbW92ZUZhdm91cml0ZSgpe1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnBvc3QoJy9yZW1vdmVGYXZvdXJpdGUnLCB7XG4gICAgICAgICdidXNDb2RlJzogdGhpcy5idXNDb2RlXG4gICAgICB9KVxuICAgICB0aGlzLmlzRmF2b3VyaXRlID0gZmFsc2VcbiAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKVxuXG4gICAgfVxuXG4gIH0sXG4gIGNvbXBvbmVudHM6IHtDb25maXJtTWVzc2FnZSwgU3ZnU3RhckZ1bGwsIFN2Z1N0YXJFbXB0eSwgU3ZnU3RhciwgRXJyb3JNZXNzYWdlLCBTdmdFeWVPcGVuZWQsIFN2Z1NlYXJjaCwgU3ZnRXllQ2xvc2VkfVxufVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG4ucGFyZW50IHtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cbn1cblxuLnNwaW5uZXIge1xuICBib3JkZXI6IDJweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gIGJvcmRlci1sZWZ0LWNvbG9yOiAjMzQ5OGRiO1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIHdpZHRoOiAyMHB4O1xuICBtYXJnaW4tdG9wOiAyMHB4O1xuICBoZWlnaHQ6IDIwcHg7XG4gIGFuaW1hdGlvbjogc3BpbiAxcyBsaW5lYXIgaW5maW5pdGU7XG5cbiAgLyogQWx0ZXJuYXRpdmVseSwgeW91IGNhbiBzZXQgbGluZS1oZWlnaHQgb2YgcGFyZW50IHRvIDIwcHggYW5kIHRleHQtYWxpZ24gdG8gY2VudGVyICovXG59XG5cbkBrZXlmcmFtZXMgc3BpbiB7XG4gIHRvIHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xuICB9XG59XG48L3N0eWxlPiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==*/