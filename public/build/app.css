/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-4.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./assets/components/BusTime.vue?vue&type=style&index=0&id=f401087c&scoped=true&lang=css ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

.parent[data-v-f401087c] {
  display: flex;
  align-items: center;
  justify-content: center;
}
.spinner[data-v-f401087c] {
  border: 2px solid rgba(0, 0, 0, 0.1);
  border-left-color: #3498db;
  border-radius: 50%;
  width: 20px;
  margin-top: 20px;
  height: 20px;
  animation: spin-f401087c 1s linear infinite;

  /* Alternatively, you can set line-height of parent to 20px and text-align to center */
}
@keyframes spin-f401087c {
to {
    transform: rotate(360deg);
}
}

/*!*************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-4.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./assets/components/BikeTime.vue?vue&type=style&index=0&id=2cf2f349&scoped=true&lang=css ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

.parent[data-v-2cf2f349] {
  display: flex;
  align-items: center;
  justify-content: center;
}
.spinner[data-v-2cf2f349] {
  border: 2px solid rgba(0, 0, 0, 0.1);
  border-left-color: #3498db;
  border-radius: 50%;
  width: 20px;
  margin-top: 20px;
  height: 20px;
  animation: spin-2cf2f349 1s linear infinite;

  /* Alternatively, you can set line-height of parent to 20px and text-align to center */
}
@keyframes spin-2cf2f349 {
to {
    transform: rotate(360deg);
}
}

/*!*********************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-4.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./assets/App.vue?vue&type=style&index=0&id=5bcdaf03&lang=css ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************************/

#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 10px;
}
button {
  background: transparent;
  border: none;
  padding: 0;
  margin: 0;
  cursor: pointer;
}



/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/