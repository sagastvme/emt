/*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-4.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./assets/components/BusApp/BusTime.vue?vue&type=style&index=0&id=355826fa&scoped=true&lang=css ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

.parent[data-v-355826fa] {
  display: flex;
  align-items: center;
  justify-content: center;
}
.spinner[data-v-355826fa] {
  border: 2px solid rgba(0, 0, 0, 0.1);
  border-left-color: #3498db;
  border-radius: 50%;
  width: 20px;
  margin-top: 20px;
  height: 20px;
  animation: spin-355826fa 1s linear infinite;

  /* Alternatively, you can set line-height of parent to 20px and text-align to center */
}
@keyframes spin-355826fa {
to {
    transform: rotate(360deg);
}
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/